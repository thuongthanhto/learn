{"version":3,"sources":["../src/app.js"],"names":["app","disable","use","req","res","next","header","method","sendStatus","schema","graphiql","set","join","__dirname","skip","get","json","urlencoded","extended","static","err","Error","status","render","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,MAAM,wBAAZ;AACAA,IAAIC,OAAJ,CAAY,cAAZ;;AAEA;AACAD,IAAIE,GAAJ,CAAQ,UAAR,EAAoB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACtCD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,gEAA3C;AACA,MAAIH,IAAII,MAAJ,KAAe,SAAnB,EAA8B;AAC1BH,QAAII,UAAJ,CAAe,GAAf;AACH,GAFD,MAEO;AACHH;AACH;AACF,CARD;;AAUA;AACAL,IAAIE,GAAJ,CAAQ,UAAR,EAAoB,8BAAY;AAC9BO,0BAD8B;AAE9BC,YAAU;AAFoB,CAAZ,CAApB;;AAKA;AACAV,IAAIW,GAAJ,CAAQ,OAAR,EAAiB,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAjB;AACAb,IAAIW,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEAX,IAAIE,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBY,QAAM,MAAMd,IAAIe,GAAJ,CAAQ,KAAR,MAAmB;AADX,CAAd,CAAR;AAGAf,IAAIE,GAAJ,CAAQ,qBAAWc,IAAX,EAAR;AACAhB,IAAIE,GAAJ,CAAQ,qBAAWe,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAlB,IAAIE,GAAJ,CAAQ,kBAAQiB,MAAR,CAAe,eAAKP,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;;AAEA;AACAb,IAAIE,GAAJ,CAAQ,GAAR;;AAEA;AACAF,IAAIE,GAAJ,CAAQ,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1B,QAAMe,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAjB,OAAKe,GAAL;AACD,CAJD;;AAMA;AACApB,IAAIE,GAAJ,CAAQ,CAACkB,GAAD,EAAMjB,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAAE;AACjCD,MACGkB,MADH,CACUF,IAAIE,MAAJ,IAAc,GADxB,EAEGC,MAFH,CAEU,OAFV,EAEmB;AACfC,aAASJ,IAAII;AADE,GAFnB;AAKD,CAND;;kBAQexB,G","file":"app.js","sourcesContent":["import express from 'express';\nimport schema from './schema';\nimport graphqlHTTP from 'express-graphql';\nimport path from 'path';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport routes from './routes';\n\nconst app = express();\napp.disable('x-powered-by');\n\n// Allow cor\napp.use('/graphql', (req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', 'Content-Type,  Authorization, Content-Length, X-Requested-With');\n  if (req.method === 'OPTIONS') {\n      res.sendStatus(200);\n  } else {\n      next();\n  }\n});\n\n// Magic code for graphql work\napp.use('/graphql', graphqlHTTP({\n  schema,\n  graphiql: true\n}));\n\n// View engine setup\napp.set('views', path.join(__dirname, '../views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev', {\n  skip: () => app.get('env') === 'test'\n}));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, '../public')));\n\n// Routes\napp.use('/', routes);\n\n// Catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// Error handler\napp.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n  res\n    .status(err.status || 500)\n    .render('error', {\n      message: err.message\n    });\n});\n\nexport default app;\n"]}