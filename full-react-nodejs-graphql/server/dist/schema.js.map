{"version":3,"sources":["../src/schema.js"],"names":["UserType","name","description","fields","id","type","first_name","last_name","email","gender","department","country","todo_count","resolve","user","todo","userId","todos","TodoType","args","title","completed","TodoQueryRootType","users","parent","Object","keys","length","schema","query"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAUA,MAAMA,WAAW,+BAAsB;AACrCC,QAAM,MAD+B;AAErCC,eAAa,kBAFwB;AAGrCC,UAAQ,OAAO;AACbC,QAAI,EAAEC,MAAM,gDAAR,EADS;AAEbC,gBAAY,EAAED,MAAM,mDAAR,EAFC;AAGbE,eAAW,EAAEF,MAAM,mDAAR,EAHE;AAIbG,WAAO,EAAEH,4BAAF,EAJM;AAKbI,YAAQ,EAAEJ,4BAAF,EALK;AAMbK,gBAAY,EAAEL,MAAM,mDAAR,EANC;AAObM,aAAS,EAAEN,MAAM,mDAAR,EAPI;AAQbO,gBAAY;AACVP,+BADU;AAEVQ,eAASC,QAAQ;AACf,eAAO,sCAAaC,QAASA,KAAKC,MAAL,KAAgBF,KAAKV,EAArB,GAA0B,CAA1B,GAA8B,CAApD,CAAP;AACD;AAJS,KARC;AAcba,WAAO;AACLZ,YAAM,yBAAgBa,QAAhB,CADD;AAELL,eAAS,CAACC,IAAD,EAAOK,IAAP,KAAgB;AACvB,eAAO,uCAAcJ,QAAQA,KAAKC,MAAL,KAAgBF,KAAKV,EAA3C,CAAP;AACD;AAJI;AAdM,GAAP;AAH6B,CAAtB,CAAjB;;AA0BA,MAAMc,WAAW,+BAAsB;AACrCjB,QAAM,MAD+B;AAErCC,eAAa,eAFwB;AAGrCC,UAAQ,OAAO;AACbC,QAAI,EAAEC,MAAM,gDAAR,EADS;AAEbe,WAAO,EAAEf,4BAAF,EAFM;AAGbgB,eAAW,EAAEhB,MAAM,oDAAR,EAHE;AAIbS,UAAM;AACJT,YAAML,QADF;AAEJa,eAAS,CAACE,IAAD,EAAOI,IAAP,KAAgB;AACvB,eAAO,qCAAYL,QAAQA,KAAKV,EAAL,KAAYW,KAAKC,MAArC,CAAP;AACD;AAJG;AAJO,GAAP;AAH6B,CAAtB,CAAjB;;AAgBA,MAAMM,oBAAoB,+BAAsB;AAC9CrB,QAAM,eADwC;AAE9CC,eAAa,sBAFiC;AAG9CC,UAAQ,OAAO;AACboB,WAAO;AACLJ,YAAM;AACJb,oBAAY,EAAED,4BAAF,EADR;AAEJE,mBAAW,EAAEF,4BAAF,EAFP;AAGJK,oBAAY,EAAEL,4BAAF,EAHR;AAIJM,iBAAS,EAAEN,4BAAF;AAJL,OADD;AAOLA,YAAM,yBAAgBL,QAAhB,CAPD;AAQLE,mBAAa,eARR;AASLW,eAAS,CAACW,MAAD,EAASL,IAAT,KAAkB;AACzB,YAAIM,OAAOC,IAAP,CAAYP,IAAZ,EAAkBQ,MAAtB,EAA8B;AAC5B,iBAAO,uCAAcR,IAAd,CAAP;AACD;AACD;AACD;AAdI,KADM;AAiBbF,WAAO;AACLE,YAAM;AACJH,gBAAQ,EAAEX,yBAAF,EADJ;AAEJgB,mBAAW,EAAEhB,6BAAF;AAFP,OADD;AAKLA,YAAM,yBAAgBa,QAAhB,CALD;AAMLhB,mBAAa,eANR;AAOLW,eAAS,CAACW,MAAD,EAASL,IAAT,KAAkB;AACzB,YAAIM,OAAOC,IAAP,CAAYP,IAAZ,EAAkBQ,MAAtB,EAA8B;AAC5B,iBAAO,uCAAcR,IAAd,CAAP;AACD;AACD;AACD;AAZI;AAjBM,GAAP;AAHsC,CAAtB,CAA1B;;AAqCA,MAAMS,SAAS,2BAAkB;AAC/BC,SAAOP;AADwB,CAAlB,CAAf;;kBAIeM,M","file":"schema.js","sourcesContent":["import Users from './data/users';\nimport Todos from './data/todos';\nimport find from 'lodash/find';\nimport filter from 'lodash/filter';\nimport sumBy from 'lodash/sumBy';\nimport {\n  GraphQLInt,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLSchema,\n} from 'graphql';\n\nconst UserType = new GraphQLObjectType({\n  name: 'User',\n  description: 'Users in company',\n  fields: () => ({\n    id: { type: new GraphQLNonNull(GraphQLInt) },\n    first_name: { type: new GraphQLNonNull(GraphQLString) },\n    last_name: { type: new GraphQLNonNull(GraphQLString) },\n    email: { type: GraphQLString },\n    gender: { type: GraphQLString },\n    department: { type: new GraphQLNonNull(GraphQLString) },\n    country: { type: new GraphQLNonNull(GraphQLString) },\n    todo_count: {\n      type: GraphQLInt,\n      resolve: user => {\n        return sumBy(Todos, todo => (todo.userId === user.id ? 1 : 0));\n      },\n    },\n    todos: {\n      type: new GraphQLList(TodoType),\n      resolve: (user, args) => {\n        return filter(Todos, todo => todo.userId === user.id);\n      },\n    },\n  }),\n});\n\nconst TodoType = new GraphQLObjectType({\n  name: 'Todo',\n  description: 'Task for user',\n  fields: () => ({\n    id: { type: new GraphQLNonNull(GraphQLInt) },\n    title: { type: GraphQLString },\n    completed: { type: new GraphQLNonNull(GraphQLBoolean) },\n    user: {\n      type: UserType,\n      resolve: (todo, args) => {\n        return find(Users, user => user.id === todo.userId);\n      },\n    },\n  }),\n});\n\nconst TodoQueryRootType = new GraphQLObjectType({\n  name: 'TodoAppSchema',\n  description: 'Root Todo App Schema',\n  fields: () => ({\n    users: {\n      args: {\n        first_name: { type: GraphQLString },\n        last_name: { type: GraphQLString },\n        department: { type: GraphQLString },\n        country: { type: GraphQLString },\n      },\n      type: new GraphQLList(UserType),\n      description: 'List of Users',\n      resolve: (parent, args) => {\n        if (Object.keys(args).length) {\n          return filter(Users, args);\n        }\n        return Users;\n      },\n    },\n    todos: {\n      args: {\n        userId: { type: GraphQLInt },\n        completed: { type: GraphQLBoolean },\n      },\n      type: new GraphQLList(TodoType),\n      description: 'List of Todos',\n      resolve: (parent, args) => {\n        if (Object.keys(args).length) {\n          return filter(Todos, args);\n        }\n        return Todos;\n      },\n    },\n  }),\n});\n\nconst schema = new GraphQLSchema({\n  query: TodoQueryRootType,\n});\n\nexport default schema;\n"]}